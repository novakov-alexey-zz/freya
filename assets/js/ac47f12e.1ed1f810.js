(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[96],{3905:function(e,n,a){"use strict";a.d(n,{Zo:function(){return p},kt:function(){return m}});var r=a(7294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var c=r.createContext({}),l=function(e){var n=r.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(a),m=t,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||s;return a?r.createElement(f,o(o({ref:n},p),{},{components:a})):r.createElement(f,o({ref:n},p))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=a.length,o=new Array(s);o[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:t,o[1]=i;for(var l=2;l<s;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8220:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=a(2122),t=a(9756),s=(a(7294),a(3905)),o=["components"],i={title:"Resource parsing",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/resource-parsing.md"},c={unversionedId:"resource-parsing",id:"resource-parsing",isDocsHomePage:!1,title:"Resource parsing",description:"Custom resources or ConfigMaps are parsed into a user defined case class(es). Besides parsing, Freya converts",source:"@site/../docs/target/mdoc/resource-parsing.md",sourceDirName:".",slug:"/resource-parsing",permalink:"/freya/resource-parsing",editUrl:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/resource-parsing.md",version:"current",frontMatter:{title:"Resource parsing",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/resource-parsing.md"},sidebar:"docs",previous:{title:"ConfigMap Operator",permalink:"/freya/configmap-operator"},next:{title:"Configuration",permalink:"/freya/configuration"}},l=[{value:"Usage",id:"usage",children:[]},{value:"Simple example",id:"simple-example",children:[{value:"Jackson Simple example",id:"jackson-simple-example",children:[]},{value:"Circe Simple example",id:"circe-simple-example",children:[]}]},{value:"Advanced example",id:"advanced-example",children:[{value:"Advanced example Jackson",id:"advanced-example-jackson",children:[]},{value:"Advanced example Circe",id:"advanced-example-circe",children:[]}]}],p={toc:l};function d(e){var n=e.components,a=(0,t.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Custom resources or ConfigMaps are parsed into a user defined case class(es). Besides parsing, Freya converts\na user defined case class for status into a JSON string."),(0,s.kt)("p",null,"Supported libraries to parse JSON/YAML:"),(0,s.kt)("p",null,"Circe:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'"io.github.novakov-alexey" %% "freya-circe" % "1.0.3" \n')),(0,s.kt)("p",null,"Jackson:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'"io.github.novakov-alexey" %% "freya-jackson" % "1.0.3"\n')),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("p",null,"Add import statement at place of constructing your operator:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import freya.json.circe._\n")),(0,s.kt)("p",null,"or"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import freya.json.jackson._\n")),(0,s.kt)("h2",{id:"simple-example"},"Simple example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'final case class Principal(name: String, password: String, value: String = "")\nfinal case class Kerb(realm: String, principals: List[Principal])\nfinal case class Status(ready: Boolean = false)\n')),(0,s.kt)("h3",{id:"jackson-simple-example"},"Jackson Simple example"),(0,s.kt)("p",null,"Jackson Scala module allows parsing simple case classes (no ADT, recursion, etc.) automatically, i.e. no extra code\nneeds to be written. Thus, only import of the Freya Jackson module is needed."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import freya.json.jackson._\n")),(0,s.kt)("h3",{id:"circe-simple-example"},"Circe Simple example"),(0,s.kt)("p",null,"Circe can derive its decoder/encoders automatically, when using its ",(0,s.kt)("inlineCode",{parentName:"p"},"generic")," module with special import. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import freya.json.circe._\n// this import will derive required decoders/encoders \n// for your spec and status case classes\nimport io.circe.generic.auto._\n")),(0,s.kt)("p",null,"Circe auto codecs derivation requires below module in your dependency settings:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'"io.circe" %% "circe-generic" % circeVersion\n')),(0,s.kt)("h2",{id:"advanced-example"},"Advanced example"),(0,s.kt)("p",null,"Let's use ADT (algebraic data types) to design custom resource case class for ",(0,s.kt)("inlineCode",{parentName:"p"},"Password")," and\n",(0,s.kt)("inlineCode",{parentName:"p"},"Secret")," properties. Also, some classes will have default values."),(0,s.kt)("h3",{id:"advanced-example-jackson"},"Advanced example Jackson"),(0,s.kt)("p",null,"Jackson provides several annotations to configure deserialisation for enum-like classes:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.fasterxml.jackson.annotation.JsonSubTypes.Type\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id\nimport com.fasterxml.jackson.annotation.{JsonSubTypes, JsonTypeInfo}\nimport Secret.{Keytab, KeytabAndPassword}\nimport Password.{Static, Random}\n\n@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")\n@JsonSubTypes(\n  Array(\n    new Type(value = classOf[Static], name = "static"), \n    new Type(value = classOf[Random], name = "random")\n  )\n)\nsealed trait Password\nobject Password {\n  final case class Static(value: String) extends Password\n  final case class Random() extends Password\n}\n\n@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")\n@JsonSubTypes(\n  Array(\n    new Type(value = classOf[Keytab], name = "Keytab"), \n    new Type(value = classOf[KeytabAndPassword], name = "KeytabAndPassword")\n  )\n)\nsealed trait Secret {\n  val name: String\n}\nobject Secret {\n  final case class Keytab(name: String) extends Secret\n  final case class KeytabAndPassword(name: String) extends Secret\n}\n\nfinal case class Principal(\n  name: String, password: Password, \n  keytab: String, secret: Secret\n)\nfinal case class Krb(realm: String, principals: List[Principal])\nfinal case class Status(\n  processed: Boolean, lastPrincipalCount: Int, \n  totalPrincipalCount: Int, error: String = ""\n)\n')),(0,s.kt)("h3",{id:"advanced-example-circe"},"Advanced example Circe"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'sealed trait Password\nfinal case class Static(value: String) extends Password\nfinal case class Random() extends Password\n\nsealed trait Secret {\n  val name: String\n}\n\nfinal case class Keytab(name: String) extends Secret\nfinal case class KeytabAndPassword(name: String) extends Secret\n\nfinal case class Principal(\n  name: String, password: Password = Random(), \n  keytab: String, secret: Secret\n)\nfinal case class Krb(realm: String, principals: List[Principal])\nfinal case class Status(\n  processed: Boolean, lastPrincipalCount: Int, \n  totalPrincipalCount: Int, error: String = ""\n)\n')),(0,s.kt)("p",null,"Circe provides generic-extras module to cope with above hierarchy of case classes:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'// note: it is separate Circe module called generic-extras, \n// which has its own version.\n"io.circe" %% "circe-generic-extras" % circeExtrasVersion\n')),(0,s.kt)("p",null,"Define encoders and decoders. Let's wrap decoders into a Scala trait for later convenient injection into the operator\nconstruction site. However, usage of a trait is not necessarily:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.functor._\nimport io.circe.Decoder\nimport io.circe.generic.extras.Configuration\nimport io.circe.generic.extras.auto._\n\ntrait Codecs {\n  implicit val genConfig: Configuration =\n    Configuration.default.withDiscriminator("type").withDefaults\n\n  implicit val decodePassword: Decoder[Password] =\n    List[Decoder[Password]](Decoder[Static].widen, Decoder.const(Random()).widen)\n      .reduceLeft(_.or(_))\n\n  implicit val decodeSecret: Decoder[Secret] =\n    List[Decoder[Secret]](Decoder[Keytab].widen, Decoder[KeytabAndPassword].widen)\n      .reduceLeft(_.or(_))\n}\n')),(0,s.kt)("p",null,"Then mixin or import all implicit values from the ",(0,s.kt)("inlineCode",{parentName:"p"},"Codecs")," trait into the operator construction site."))}d.isMDXComponent=!0}}]);