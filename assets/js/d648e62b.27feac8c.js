(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[61],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,d=u["".concat(s,".").concat(m)]||u[m]||f[m]||a;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6486:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return p},metadata:function(){return s},toc:function(){return l},default:function(){return f}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],p={title:"ConfigMap Operator",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/configmap-operator.md"},s={unversionedId:"configmap-operator",id:"configmap-operator",isDocsHomePage:!1,title:"ConfigMap Operator",description:"Please first look at CRD Operator documentation. It contains more common information, which is applicable to ConfigMap",source:"@site/../docs/target/mdoc/configmap-operator.md",sourceDirName:".",slug:"/configmap-operator",permalink:"/freya/configmap-operator",editUrl:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/configmap-operator.md",version:"current",frontMatter:{title:"ConfigMap Operator",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/configmap-operator.md"},sidebar:"docs",previous:{title:"CRD Operator",permalink:"/freya/crd-operator"},next:{title:"Resource parsing",permalink:"/freya/resource-parsing"}},l=[{value:"Implementation Steps with Freya",id:"implementation-steps-with-freya",children:[{value:"1 . Define resource specification as a hierarchy of case classes.",id:"1--define-resource-specification-as-a-hierarchy-of-case-classes",children:[]},{value:"2 . Implement your actions for Add, Modify, Delete events",id:"2--implement-your-actions-for-add-modify-delete-events",children:[]},{value:"3 . Start your operator",id:"3--start-your-operator",children:[]},{value:"ConfigMap Helper",id:"configmap-helper",children:[]}]}],c={toc:l};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Please first look at CRD Operator documentation. It contains more common information, which is applicable to ConfigMap\noperator too."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ConfigMap")," is a native resource, so that no custom definition needs to be created in Kubernetes before we start creating\ncustom resources."),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"ConfigMap")," option, our target custom resource will look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-krb1\n  namespace: test\n  labels:\n    io.myorg.kerboperator/kind: Kerb\ndata:\n  config: |\n    realm: EXAMPLE.COM\n    principals:\n      - name: client1\n        password: static\n        value: mypass\n      - name: user2\n        password: static\n        value: mypass2\n")),(0,a.kt)("p",null,"Please note, above ",(0,a.kt)("inlineCode",{parentName:"p"},"data.config")," section does not define any Custom Resources in terms of Kubernetes, we just leverage\na plain ",(0,a.kt)("inlineCode",{parentName:"p"},"ConfigMap")," to emulate custom resource."),(0,a.kt)("h2",{id:"implementation-steps-with-freya"},"Implementation Steps with Freya"),(0,a.kt)("p",null,"There are 3 steps to implement ConfigMap Operator:"),(0,a.kt)("h3",{id:"1--define-resource-specification-as-a-hierarchy-of-case-classes"},"1 . Define resource specification as a hierarchy of case classes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'final case class Principal(name: String, password: String, value: String = "")\nfinal case class Kerb(realm: String, principals: List[Principal])\n')),(0,a.kt)("h3",{id:"2--implement-your-actions-for-add-modify-delete-events"},"2 . Implement your actions for Add, Modify, Delete events"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import freya.CmController\nimport cats.effect.Async\nimport io.fabric8.kubernetes.api.model.ConfigMap\n\nclass KrbCmController[F[_]](implicit F: Async[F]) \n  extends CmController[F, Kerb] {\n\n  // override onAdd, onDelete, onModify like in Crd Controller \n\n  override def isSupported(cm: ConfigMap): Boolean =\n    cm.getMetadata.getName.startsWith("krb")\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CmController")," class adds ",(0,a.kt)("inlineCode",{parentName:"p"},"isSupported")," method, which allows to skip particular ConfigMaps if they do not\nsatisfy to logical condition."),(0,a.kt)("h3",{id:"3--start-your-operator"},"3 . Start your operator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.{ExitCode, IO, IOApp}\nimport io.fabric8.kubernetes.client.DefaultKubernetesClient\nimport freya.K8sNamespace.Namespace\nimport freya.Configuration.ConfigMapConfig\nimport freya.Operator\nimport freya.yaml.jackson._\n\nobject KerbCmOperator extends IOApp {\n  //implicit val cs: ContextShift[IO] = contextShift\n\n  override def run(args: List[String]): IO[ExitCode] = {\n    val client = IO(new DefaultKubernetesClient)\n    \n    // the same API as for Crd Operator, but with own configuration and constructor\n    val cfg = ConfigMapConfig(Namespace("test"), prefix = "io.myorg.kerboperator")\n\n    Operator\n      .ofConfigMap[IO, Kerb](cfg, client, new KrbCmController[IO])\n      .run\n  }\n}\n')),(0,a.kt)("h3",{id:"configmap-helper"},"ConfigMap Helper"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ConfigMapHelper")," provides the same functionality as ",(0,a.kt)("inlineCode",{parentName:"p"},"CrdHelper"),", but with respect to ConfigMap kind:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"currentConfigMaps")," - a method to return current current ConfigMap resources based on passed earlier Operator\nconfiguration"),(0,a.kt)("p",null,"Properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"freya.Configuration.ConfigMapConfig")," - configuration which is passed on operator construction "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"io.fabric8.kubernetes.client.KubernetesClient")," - K8s client"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Option[Boolean]")," - isOpenShift property"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"freya.resource.ConfigMapParser")," - ConfigMap parser to parse ",(0,a.kt)("inlineCode",{parentName:"li"},"config")," key of data map to target ",(0,a.kt)("inlineCode",{parentName:"li"},"T")," kind")))}f.isMDXComponent=!0}}]);