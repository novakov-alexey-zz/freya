(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[540],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return l},kt:function(){return m}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=u(r),m=o,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||a;return r?t.createElement(d,i(i({ref:n},l),{},{components:r})):t.createElement(d,i({ref:n},l))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},1094:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var t=r(2122),o=r(9756),a=(r(7294),r(3905)),i=["components"],c={title:"Configuration",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/configuration.md"},s={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"CRD Operator:",source:"@site/../docs/target/mdoc/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/freya/configuration",editUrl:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/configuration.md",version:"current",frontMatter:{title:"Configuration",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/configuration.md"},sidebar:"docs",previous:{title:"Resource parsing",permalink:"/freya/resource-parsing"},next:{title:"Reconcile events",permalink:"/freya/reconcile-events"}},u=[],l={toc:u};function p(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"CRD Operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import freya.Configuration.CrdConfig\nimport freya.K8sNamespace.Namespace\nimport freya.AdditionalPrinterColumn\n\nCrdConfig(  \n  // namespace to watch for events in\n  namespace = Namespace("test"), \n  // CRD api prefix \n  prefix = "io.myorg.kerboperator",\n  // size of in-memory queue for received events from Kubernetes api-server, \n  // once event queue is full, watcher starts\n  // to back-pressure server web-socket, in case operators fails, all events \n  // will be gone, so operator needs to be started with reconciliation\n  eventQueueSize = 10,\n  // If true, different namespace events are dispatched concurrently, \n  // i.e. controller will be called concurrently\n  // for different namespace events. \n  // The same namespace events will be dispatched in the same order \n  // they were originally received from Kubernetes. \n  concurrentController = true,\n  // Check whether current K8s is an OpenShift on startup   \n  checkOpenshiftOnStartup = true, \n  // if None, then kind name is taken from case class name, i.e. Kerb\n  customKind = Some("Kerberos"),\n  // deploy CRD on startup, if no CRD already exists in K8s\n  deployCrd = true,\n  // short names for CRD when using kubectl, like kubectl get kr (instead of kerb) \n  shortNames = List("kr"),\n  // plural name for CRD when using kubectl\n  pluralName = "kerbs",\n  // columns to be printed when using kubectl\n  additionalPrinterColumns = List(\n    AdditionalPrinterColumn(name = "realm", columnType = "string", jsonPath = "realm")\n  )\n)\n')),(0,a.kt)("p",null,"ConfigMap Operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import freya.Configuration.ConfigMapConfig\nimport freya.K8sNamespace.AllNamespaces\n\nConfigMapConfig(  \n  // namespace to watch for events in\n  namespace = AllNamespaces, \n  // CRD api prefix \n  prefix = "io.myorg.kerboperator",\n  // see doc in CrdConfig above\n  eventQueueSize = 10,\n  // see doc in CrdConfig above\n  concurrentController = true,\n  // Check on startup whether current K8s is an OpenShift    \n  checkOpenshiftOnStartup = true, \n  // if None, then `kind` name is a case class name, i.e. Kerb\n  customKind = Some("Kerberos")\n)\n')))}p.isMDXComponent=!0}}]);