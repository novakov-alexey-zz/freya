(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[962],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9225:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),i=["components"],l={title:"CRD Operator",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/crd-operator.md"},s={unversionedId:"crd-operator",id:"crd-operator",isDocsHomePage:!1,title:"CRD Operator",description:"\x3c!-- # Table of Contents",source:"@site/../docs/target/mdoc/crd-operator.md",sourceDirName:".",slug:"/crd-operator",permalink:"/freya/crd-operator",editUrl:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/crd-operator.md",version:"current",frontMatter:{title:"CRD Operator",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/crd-operator.md"},sidebar:"docs",previous:{title:"Overview",permalink:"/freya/"},next:{title:"ConfigMap Operator",permalink:"/freya/configmap-operator"}},p=[{value:"Implementation Steps with Freya",id:"implementation-steps-with-freya",children:[{value:"1 . Define resource specification as a hierarchy of case classes",id:"1--define-resource-specification-as-a-hierarchy-of-case-classes",children:[]},{value:"2 . Implement your actions for Add, Modify, Delete events",id:"2--implement-your-actions-for-add-modify-delete-events",children:[]},{value:"3 . Start your operator",id:"3--start-your-operator",children:[]}]},{value:"Event Dispatching",id:"event-dispatching",children:[]},{value:"Restart configuration",id:"restart-configuration",children:[{value:"Retry infinitely with random delay",id:"retry-infinitely-with-random-delay",children:[]},{value:"Retry with fixed number of restarts",id:"retry-with-fixed-number-of-restarts",children:[]}]},{value:"Deploy CRD manually",id:"deploy-crd-manually",children:[]},{value:"Controller Helpers",id:"controller-helpers",children:[{value:"CRD Helper",id:"crd-helper",children:[]}]}],c={toc:p};function u(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Further in the documentation, ",(0,o.kt)("em",{parentName:"p"},"Controller")," and ",(0,o.kt)("em",{parentName:"p"},"Operator")," definitions are used as synonymous."),(0,o.kt)("p",null,"Let's take an example of some controller like ",(0,o.kt)("a",{parentName:"p",href:"http://web.mit.edu/KERBEROS/krb5-1.5/krb5-1.5.4/doc/krb5-user/What-is-a-Kerberos-Principal_003f.html"},"Kerberos principal"),"\nlist, which needs to be propagated to KDC database. "),(0,o.kt)("p",null,"Using Custom Resource option, our target Custom Resource will look like this:  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: io.myorg.kerboperator/v1\nkind: Kerb\nmetadata:\n  name: my-krb1\n  namespace: test\nspec:\n  realm: EXAMPLE.COM\n  principals:\n    - name: client1\n      password: static\n      value: mypass\n    - name: user2\n      password: static\n      value: mypass2\n")),(0,o.kt)("p",null,"Freya does not require to write YAML files for your custom resources definitions, nor for customer resource\ninstances and ConfigMaps at all. CRD in K8s will be created automatically based on case classes you define."),(0,o.kt)("p",null,"For the sake of example, we are not going to create any container with Kerberos server running in it, but just showing\nhow Freya can help to watch our custom resources or ConfigMaps. Particular controller actions to be implemented by\ncontroller author using ",(0,o.kt)("strong",{parentName:"p"},"fabric8")," kubernetes-client. Freya is only a facilitator between K8s api-server and\nyour custom controller actions."),(0,o.kt)("h2",{id:"implementation-steps-with-freya"},"Implementation Steps with Freya"),(0,o.kt)("p",null,"There are 3 steps to implement a CRD Operator:"),(0,o.kt)("h3",{id:"1--define-resource-specification-as-a-hierarchy-of-case-classes"},"1 . Define resource specification as a hierarchy of case classes"),(0,o.kt)("p",null,"Above Kerberos spec can be designed as two case classes ",(0,o.kt)("inlineCode",{parentName:"p"},"Kerb")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Principal")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'final case class Principal(name: String, password: String, value: String = "")\nfinal case class Kerb(realm: String, principals: List[Principal])\n')),(0,o.kt)("p",null,"According to Kubernetes API, every custom resource may have optional property ",(0,o.kt)("inlineCode",{parentName:"p"},"status"),". In order to model\nstatus, we will define one more case class. Name and properties of this class can be anything. Basically,\nit can define its own hierarchy of case classes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"final case class Status(ready: Boolean)\n")),(0,o.kt)("h3",{id:"2--implement-your-actions-for-add-modify-delete-events"},"2 . Implement your actions for Add, Modify, Delete events"),(0,o.kt)("p",null,"Just extend ",(0,o.kt)("inlineCode",{parentName:"p"},"freya.Controller")," abstract class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.typesafe.scalalogging.LazyLogging\nimport cats.effect.Async\nimport cats.syntax.apply._\nimport freya.Controller\nimport freya.models.{CustomResource, NewStatus}\n\nclass KerbController[F[_]](implicit F: Async[F]) \n  extends Controller[F, Kerb, Status] with LazyLogging {\n\n  override def onAdd(krb: CustomResource[Kerb, Status]): F[NewStatus[Status]] =\n    F.delay(\n      logger.info(s"new Krb added: ${krb.spec}, ${krb.metadata}")\n    ) *> F.pure(Some(Status(true)))\n\n  override def onDelete(krb: CustomResource[Kerb, Status]): F[Unit] =\n    F.delay(logger.info(s"Krb deleted: ${krb.spec}, ${krb.metadata}"))\n\n  override def onModify(krb: CustomResource[Kerb, Status]): F[NewStatus[Status]] =\n    F.delay(\n        logger.info(s"Krb modified: ${krb.spec}, ${krb.metadata}")\n    ) *> F.pure(Some(Status(true)))\n  \n  override def onInit(): F[Unit] =\n    F.delay(logger.info(s"init completed"))\n}\n')),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"type NewStatus[U] = Option[U]")),(0,o.kt)("p",null,"All methods have default implementation as ",(0,o.kt)("inlineCode",{parentName:"p"},"F.pure(None)")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"F.unit"),", so override only necessary methods for your custom controller."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onInit")," - is called before controller is started. In terms ",(0,o.kt)("strong",{parentName:"p"},"fabric8")," client, ",(0,o.kt)("strong",{parentName:"p"},"onInit")," is called before watcher\nis started to watch for custom resources or ConfigMap resources."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onAdd"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onDelete"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onModify")," - are called whenever corresponding event is triggered by Kubernetes api-server."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onAdd")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"onModify")," - allows to set new custom resource status by returning a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"F[Option[U]]")," in these methods.\n",(0,o.kt)("inlineCode",{parentName:"p"},"U")," is a type of status case class."),(0,o.kt)("h3",{id:"3--start-your-operator"},"3 . Start your operator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.{ExitCode, IO, IOApp}\nimport io.fabric8.kubernetes.client.DefaultKubernetesClient\nimport freya.K8sNamespace.Namespace\nimport freya.Operator\nimport freya.Configuration.CrdConfig\nimport freya.json.jackson._\n\nobject KerbCrdOperator extends IOApp { \n\n  override def run(args: List[String]): IO[ExitCode] = {\n    val client = IO(new DefaultKubernetesClient)\n    val cfg = CrdConfig(Namespace("test"), prefix = "io.myorg.kerboperator")\n\n    Operator\n      .ofCrd[IO, Kerb, Status](cfg, client, new KerbController[IO])\n      .run\n  }\n}\n')),(0,o.kt)("p",null,"Operator's ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," method returns an ",(0,o.kt)("inlineCode",{parentName:"p"},"IO[ExitCode]"),", which is running a web-socket connection to Kubernetes api-server.\nReturned ",(0,o.kt)("inlineCode",{parentName:"p"},"IO")," value is a long-running and server-like task, which terminates only if K8s api-server closes client\nconnection. Running Operator is watching for events:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"for customer resources with ",(0,o.kt)("inlineCode",{parentName:"li"},"Kerb")," kind and apiGroup ",(0,o.kt)("inlineCode",{parentName:"li"},"io.myorg.kerboperator/v1"),", in case of CRD Operator"),(0,o.kt)("li",{parentName:"ul"},"for ConfigMap kind with label ",(0,o.kt)("inlineCode",{parentName:"li"},"io.myorg.kerboperator/kind=Kerb"),", in case of ConfigMap Operator")),(0,o.kt)("h2",{id:"event-dispatching"},"Event Dispatching"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Freya Runtime",src:r(6167).Z})),(0,o.kt)("p",null,"Freya dispatches api-server events concurrently accross different namespaces, but in original order within the same namespace. Supplied controller will be called concurrently, thus any state variables of the controller needs to be thread-safe or atomic. In order to use single-threaded dispatch, one can set ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Configuration#concurrentController"),". "),(0,o.kt)("p",null,"Concurrent dispatching is maintaining in-memory queues per namespace to buffer received events for a short time. These events are dispatched one by one to the controller. "),(0,o.kt)("h2",{id:"restart-configuration"},"Restart configuration"),(0,o.kt)("p",null,"Freya can automatically restart your operator in case of any failure during the CRs/ConfigMaps event listening.\nIn terms Cats-Effect IO, once IO task is completed, which means Freya Operator has exited from its normal\nlistening process, it will be restarted with the same parameters. There are few options to control restart behaviour."),(0,o.kt)("h3",{id:"retry-infinitely-with-random-delay"},"Retry infinitely with random delay"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport freya.Retry.Infinite\nimport freya.Operator\nimport scala.concurrent.duration._\nimport scala.concurrent.ExecutionContext\n\nval cfg = CrdConfig(Namespace("test"), prefix = "io.myorg.kerboperator")\nval client = IO(new DefaultKubernetesClient)\n\nOperator\n  .ofCrd[IO, Kerb, Status](cfg, client, new KerbController[IO])\n   .withRestart(Infinite(minDelay = 1.second, maxDelay = 10.seconds))\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Infinite")," type will restart operator infinitely making random delay between retries within ",(0,o.kt)("inlineCode",{parentName:"p"},"[minDelay, maxDelay)")," time range."),(0,o.kt)("h3",{id:"retry-with-fixed-number-of-restarts"},"Retry with fixed number of restarts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport freya.Retry.Times\nimport freya.Operator\nimport scala.concurrent.duration._\nimport scala.concurrent.ExecutionContext\n\nval cfg = CrdConfig(Namespace("test"), prefix = "io.myorg.kerboperator")\nval client = IO(new DefaultKubernetesClient)\n\nOperator\n  .ofCrd[IO, Kerb, Status](cfg, client, new KerbController[IO])\n   .withRestart(Times(maxRetries = 3, delay = 2.seconds, multiplier = 2))\n')),(0,o.kt)("p",null,"Above configuration will lead to the following delay in seconds: 2, 4 and 8. ",(0,o.kt)("inlineCode",{parentName:"p"},"multiplier")," is used to\ncalculate next delay by ",(0,o.kt)("inlineCode",{parentName:"p"},"previous delay * multiplier"),"."),(0,o.kt)("h2",{id:"deploy-crd-manually"},"Deploy CRD manually"),(0,o.kt)("p",null,"In order to disable automatic deployment of Custom Resource Definition as well as OpenAPi schema, one can\nset false in ",(0,o.kt)("inlineCode",{parentName:"p"},"freya.Configuration.CrdConfig.deployCrd = false"),". Operator will expect to find a CRD in K8s during the startup, it\nwon't try to deploy new CRD, even if CRD is not found. However, what may happen in case CRD is not found and ",(0,o.kt)("inlineCode",{parentName:"p"},"deployCrd"),"\nis ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", then operator will fail and return failed ",(0,o.kt)("inlineCode",{parentName:"p"},"IO")," value immediately. Freya Operator can't work without CRD being\nretrieved from K8s api-server. "),(0,o.kt)("p",null,"Manual deployment of CRD is usually done with YAML files using tools like ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl"),".   "),(0,o.kt)("h2",{id:"controller-helpers"},"Controller Helpers"),(0,o.kt)("p",null,"Both types of controllers can be constructed using helper as input parameter. Helper has several useful properties and\nmethod to retrieve current resources for CRD or ConfigMap kinds. Although, the same functionality can be written\nwithin Operator code manually."),(0,o.kt)("h3",{id:"crd-helper"},"CRD Helper"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport freya.CrdHelper\nimport freya.models.NoStatus  \nimport scala.concurrent.ExecutionContext\n\nval cfg = CrdConfig(Namespace("test"), prefix = "io.myorg.kerboperator")\nval client = IO(new DefaultKubernetesClient)\nval controller = (helper: CrdHelper[IO, Kerb, NoStatus]) =>\n  new Controller[IO, Kerb, NoStatus] {\n\n    override def onInit(): IO[Unit] =\n      helper.currentResources().fold(\n        IO.raiseError, // refusing to process\n        r =>\n            IO(r.foreach {\n                case Left((error, r)) => \n                  println(s"Failed to parse CR instances $r, error = $error")\n                case Right(resource) => \n                  println(s"current ${cfg.getKind} CRs: ${resource.spec}")\n            })\n      )\n  }\n\nOperator\n  .ofCrd[IO, Kerb, NoStatus](cfg, client, controller)\n  .withRestart()\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CrdHelper")," provides several properties such as: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"freya.Configuration.CrdConfig")," - configuration which is passed on operator construction"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"io.fabric8.kubernetes.client.KubernetesClient")," - K8s client"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Option[Boolean]")," - isOpenShift property"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition")," - custom resource definition object"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"freya.resource.CrdParser")," - CR parser to parse ",(0,o.kt)("inlineCode",{parentName:"li"},"freya.watcher.AnyCustomResource#spec")," to target ",(0,o.kt)("inlineCode",{parentName:"li"},"T")," kind.")))}u.isMDXComponent=!0},6167:function(e,t,r){"use strict";t.Z=r.p+"assets/images/freya_runtime-5f2f63bd98f89464d29aba48ef328036.png"}}]);