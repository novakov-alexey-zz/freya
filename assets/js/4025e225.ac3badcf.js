(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[596],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=s(t),m=o,d=f["".concat(l,".").concat(m)]||f[m]||p[m]||a;return t?n.createElement(d,i(i({ref:r},u),{},{components:t})):n.createElement(d,i({ref:r},u))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1146:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var n=t(2122),o=t(9756),a=(t(7294),t(3905)),i=["components"],c={title:"Reconcile events",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/reconcile-events.md"},l={unversionedId:"reconcile-events",id:"reconcile-events",isDocsHomePage:!1,title:"Reconcile events",description:"Freya can start your operator with parallel reconciler thread, which is puling current",source:"@site/../docs/target/mdoc/reconcile-events.md",sourceDirName:".",slug:"/reconcile-events",permalink:"/freya/reconcile-events",editUrl:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/reconcile-events.md",version:"current",frontMatter:{title:"Reconcile events",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/reconcile-events.md"},sidebar:"docs",previous:{title:"Configuration",permalink:"/freya/configuration"},next:{title:"Structural Schema",permalink:"/freya/structural-schema"}},s=[],u={toc:s};function p(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Freya can start your operator with parallel reconciler thread, which is puling current\nresources (CRs or ConfigMaps) at specified time interval. This feature allows to pro-actively check\nexisting resources and make sure that desired configuration is reflected in terms of Kubernetes objects.\nIt is also useful, when your controller failed to handle real-time event. It can process such event later,\nonce reconcile process is getting desired resources and pushes them to controller, so that controller can process those\nevents second or n-th time. Reconciler always returns all resources regardless they were already handled\nby your operator or not. Thus, it is important that your operators works in ",(0,a.kt)("inlineCode",{parentName:"p"},"idempotent")," manner. "),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"Kerb")," example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'final case class Principal(name: String, password: String, value: String = "")\nfinal case class Kerb(realm: String, principals: List[Principal])\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import freya.Configuration.CrdConfig\nimport freya.K8sNamespace.Namespace\nimport freya.models._\nimport freya.json.jackson._\nimport freya.{Controller, Operator}\nimport cats.syntax.functor._\nimport cats.effect._\nimport scala.concurrent.ExecutionContext\nimport scala.concurrent.duration._\nimport com.typesafe.scalalogging.LazyLogging\nimport io.fabric8.kubernetes.client.{KubernetesClient, DefaultKubernetesClient}  \nimport scala.annotation.unused\n\nval cfg = CrdConfig(Namespace("test"), prefix = "io.myorg.kerboperator")\nval client = IO(new DefaultKubernetesClient)\n\n// override reconcile method\n\nclass KerbController[F[_]](@unused client: KubernetesClient)(\n  implicit F: Async[F]\n) \n  extends Controller[F, Kerb, Unit] with LazyLogging {\n\n  override def reconcile(krb: CustomResource[Kerb, Unit]): F[NoStatus] =\n    F.delay(logger.info(s"Kerb to reconcile: ${krb.spec}, ${krb.metadata}")).void \n}\n\nOperator\n  .ofCrd[IO, Kerb](cfg, client, (c: KubernetesClient) => new KerbController[IO](c))\n  .withReconciler(1.minute)\n  .withRestart()\n')),(0,a.kt)("p",null,"Above configuration will call controller's ",(0,a.kt)("inlineCode",{parentName:"p"},"reconcile")," method every minute, since operator start, in case at least\none CR/ConfigMap resource is found."))}p.isMDXComponent=!0}}]);