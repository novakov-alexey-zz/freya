(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{71:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return c})),n.d(r,"metadata",(function(){return i})),n.d(r,"toc",(function(){return l})),n.d(r,"default",(function(){return u}));var t=n(3),o=n(7),a=(n(0),n(82)),c={title:"Reconcile events",custom_edit_url:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/reconcile-events.md"},i={unversionedId:"reconcile-events",id:"reconcile-events",isDocsHomePage:!1,title:"Reconcile events",description:"Freya can start your operator with parallel reconciler thread, which is puling current",source:"@site/../docs/target/mdoc/reconcile-events.md",slug:"/reconcile-events",permalink:"/freya/reconcile-events",editUrl:"https://github.com/novakov-alexey/freya/edit/master/docs/docs/reconcile-events.md",version:"current",sidebar:"docs",previous:{title:"Configuration",permalink:"/freya/configuration"},next:{title:"Structural Schema",permalink:"/freya/structural-schema"}},l=[],s={toc:l};function u(e){var r=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},s,n,{components:r,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Freya can start your operator with parallel reconciler thread, which is puling current\nresources (CRs or ConfigMaps) at specified time interval. This feature allows to pro-actively check\nexisting resources and make sure that desired configuration is reflected in terms of Kubernetes objects.\nIt is also useful, when your controller failed to handle real-time event. It can process such event later,\nonce reconcile process is getting desired resources and pushes them to controller, so that controller can process those\nevents second or n-th time. Reconciler always returns all resources regardless they were already handled\nby your operator or not. Thus, it is important that your operators works in ",Object(a.b)("inlineCode",{parentName:"p"},"idempotent")," manner. "),Object(a.b)("p",null,"Using ",Object(a.b)("inlineCode",{parentName:"p"},"Kerb")," example:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'final case class Principal(name: String, password: String, value: String = "")\nfinal case class Kerb(realm: String, principals: List[Principal])\n')),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'import freya.Configuration.CrdConfig\nimport freya.K8sNamespace.Namespace\nimport freya.models._\nimport freya.json.jackson._\nimport freya.{Controller, Operator}\nimport cats.syntax.functor._\nimport cats.effect._\nimport scala.concurrent.ExecutionContext\nimport scala.concurrent.duration._\nimport com.typesafe.scalalogging.LazyLogging\nimport io.fabric8.kubernetes.client.{KubernetesClient, DefaultKubernetesClient}  \nimport scala.annotation.unused\n\nval cfg = CrdConfig(Namespace("test"), prefix = "io.myorg.kerboperator")\nval client = IO(new DefaultKubernetesClient)\n\n// override reconcile method\n\nclass KerbController[F[_]](@unused client: KubernetesClient)(\n  implicit F: Async[F]\n) \n  extends Controller[F, Kerb, Unit] with LazyLogging {\n\n  override def reconcile(krb: CustomResource[Kerb, Unit]): F[NoStatus] =\n    F.delay(logger.info(s"Kerb to reconcile: ${krb.spec}, ${krb.metadata}")).void \n}\n\nOperator\n  .ofCrd[IO, Kerb](cfg, client, (c: KubernetesClient) => new KerbController[IO](c))\n  .withReconciler(1.minute)\n  .withRestart()\n')),Object(a.b)("p",null,"Above configuration will call controller's ",Object(a.b)("inlineCode",{parentName:"p"},"reconcile")," method every minute, since operator start, in case at least\none CR/ConfigMap resource is found."))}u.isMDXComponent=!0},82:function(e,r,n){"use strict";n.d(r,"a",(function(){return p})),n.d(r,"b",(function(){return d}));var t=n(0),o=n.n(t);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function c(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var r=o.a.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},p=function(e){var r=u(e.components);return o.a.createElement(s.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},m=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=t,d=p["".concat(c,".").concat(m)]||p[m]||f[m]||a;return n?o.a.createElement(d,i(i({ref:r},s),{},{components:n})):o.a.createElement(d,i({ref:r},s))}));function d(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=n.length,c=new Array(a);c[0]=m;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i.mdxType="string"==typeof e?e:t,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);