(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{78:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return a})),r.d(n,"metadata",(function(){return i})),r.d(n,"toc",(function(){return c})),r.d(n,"default",(function(){return u}));var t=r(3),o=(r(0),r(82));const a={title:"Configuration"},i={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"CRD Operator:",source:"@site/../docs/target/mdoc/configuration.md",slug:"/configuration",permalink:"/freya/configuration",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/../docs/target/mdoc/configuration.md",version:"current",sidebar:"docs",previous:{title:"Resource parsing",permalink:"/freya/resource-parsing"},next:{title:"Reconcile events",permalink:"/freya/reconcile-events"}},c=[],s={toc:c};function u({components:e,...n}){return Object(o.b)("wrapper",Object(t.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"CRD Operator:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import freya.Configuration.CrdConfig\nimport freya.K8sNamespace.Namespace\nimport freya.AdditionalPrinterColumn\n\nCrdConfig(  \n  // namespace to watch for events in\n  namespace = Namespace("test"), \n  // CRD api prefix \n  prefix = "io.myorg.kerboperator",\n  // size of in-memory queue for received events from Kubernetes api-server, \n  // once event queue is full, watcher starts\n  // to back-pressure server web-socket, in case operators fails, all events \n  // will be gone, so operator needs to be started with reconciliation\n  eventQueueSize = 10,\n  // If true, different namespace events are dispatched concurrently, \n  // i.e. controller will be called concurrently\n  // for different namespace events. \n  // The same namespace events will be dispatched in the same order \n  // they were originally received from Kubernetes. \n  concurrentController = true,\n  // Check whether current K8s is an OpenShift on startup   \n  checkOpenshiftOnStartup = true, \n  // if None, then kind name is taken from case class name, i.e. Kerb\n  customKind = Some("Kerberos"),\n  // deploy CRD on startup, if no CRD already exists in K8s\n  deployCrd = true,\n  // short names for CRD when using kubectl, like kubectl get kr (instead of kerb) \n  shortNames = List("kr"),\n  // plural name for CRD when using kubectl\n  pluralName = "kerbs",\n  // columns to be printed when using kubectl\n  additionalPrinterColumns = List(\n    AdditionalPrinterColumn(name = "realm", columnType = "string", jsonPath = "realm")\n  )\n)\n')),Object(o.b)("p",null,"ConfigMap Operator:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import freya.Configuration.ConfigMapConfig\nimport freya.K8sNamespace.AllNamespaces\n\nConfigMapConfig(  \n  // namespace to watch for events in\n  namespace = AllNamespaces, \n  // CRD api prefix \n  prefix = "io.myorg.kerboperator",\n  // see doc in CrdConfig above\n  eventQueueSize = 10,\n  // see doc in CrdConfig above\n  concurrentController = true,\n  // Check on startup whether current K8s is an OpenShift    \n  checkOpenshiftOnStartup = true, \n  // if None, then `kind` name is a case class name, i.e. Kerb\n  customKind = Some("Kerberos")\n)\n')))}u.isMDXComponent=!0},82:function(e,n,r){"use strict";r.d(n,"a",(function(){return l})),r.d(n,"b",(function(){return d}));var t=r(0),o=r.n(t);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=o.a.createContext({}),p=function(e){var n=o.a.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},l=function(e){var n=p(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(r),m=t,d=l["".concat(i,".").concat(m)]||l[m]||f[m]||a;return r?o.a.createElement(d,c(c({ref:n},u),{},{components:r})):o.a.createElement(d,c({ref:n},u))}));function d(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:t,i[1]=c;for(var u=2;u<a;u++)i[u]=r[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);